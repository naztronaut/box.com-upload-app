{"version":3,"sources":["logo.svg","components/header.jsx","components/upload.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","state","className","type","placeholder","aria-label","Component","BoxUpload","props","onBeforeUpload","e","console","log","setState","progressStatus","growl","show","severity","summary","detail","onUpload","data","onError","myUploader","event","Fragment","ref","el","this","mode","style","height","name","url","multiple","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,gJC0B5BC,E,4MAxBbC,MAAQ,G,uDAEN,OACE,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,gBAAb,cACA,0BAAMA,UAAU,eACd,2BACEA,UAAU,uBACVC,KAAK,SACLC,YAAY,SACZC,aAAW,WAEb,4BACEH,UAAU,uCACVC,KAAK,UAFP,gB,GAbWG,a,+BCgFNC,E,kDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEC,gBAAgB,IAChC,EAAKC,MAAMC,KAAK,CACdC,SAAU,OACVC,QAAS,iBACTC,OAAQ,2BAbO,EAiBnBC,SAAW,SAACC,GACVV,QAAQC,IAAIS,GACZ,EAAKR,SAAS,CAAEC,gBAAgB,IAChC,EAAKC,MAAMC,KAAK,CACdC,SAAU,UACVC,QAAS,mBACTC,OAAQ,uCAvBO,EA2BnBG,QAAU,SAACZ,GACTC,QAAQC,IAAIF,GACZ,EAAKK,MAAMC,KAAK,CACdC,SAAU,QACVC,QAAS,gBACTC,OAAQ,wCAhCO,EAoCnBI,WAAa,SAACC,GACZb,QAAQC,IAAIY,GACZb,QAAQC,IAAR,iBApCA,EAAKX,MAAQ,CACXa,gBAAgB,GAHD,E,qDAyCT,IAAD,OACP,OACE,kBAAC,IAAMW,SAAP,KAEI,kBAAC,QAAD,CACEC,IAAK,SAACC,GACJ,EAAKZ,MAAQY,KAIlBC,KAAK3B,MAAMa,gBACV,kBAAC,cAAD,CACEe,KAAK,gBACLC,MAAO,CAAEC,OAAQ,SAGrB,kBAAC,aAAD,CACEC,KAAK,WACLH,KAAK,QACLI,IAAI,UACJxB,eAAgBmB,KAAKnB,eACrBW,SAAUQ,KAAKR,SACfE,QAASM,KAAKN,QACdY,UAAU,S,GAjEI5B,a,wBCcT6B,MATf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.ff7985a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nclass Header extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\">Box Upload</a>\r\n        <form className=\"form-inline\">\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Search\"\r\n            aria-label=\"Search\"\r\n          />\r\n          <button\r\n            className=\"btn btn-outline-success my-2 my-sm-0\"\r\n            type=\"submit\"\r\n          >\r\n            Search\r\n          </button>\r\n        </form>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { FileUpload } from \"primereact/fileupload\";\r\nimport { ProgressBar } from \"primereact/progressbar\";\r\nimport { Growl } from \"primereact/growl\";\r\n\r\nclass BoxUpload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      progressStatus: false,\r\n    };\r\n  }\r\n\r\n  onBeforeUpload = (e) => {\r\n    console.log(e);\r\n    this.setState({ progressStatus: true });\r\n    this.growl.show({\r\n      severity: \"info\",\r\n      summary: \"Upload Started\",\r\n      detail: \"Uploading File to Box\",\r\n    });\r\n  };\r\n\r\n  onUpload = (data) => {\r\n    console.log(data);\r\n    this.setState({ progressStatus: false });\r\n    this.growl.show({\r\n      severity: \"success\",\r\n      summary: \"Upload Completed\",\r\n      detail: \"File Successfully uploaded to Box\",\r\n    });\r\n  };\r\n\r\n  onError = (e) => {\r\n    console.log(e);\r\n    this.growl.show({\r\n      severity: \"error\",\r\n      summary: \"Upload Failed\",\r\n      detail: \"File Failed to upload. Check logs.\",\r\n    });\r\n  };\r\n\r\n  myUploader = (event) => {\r\n    console.log(event);\r\n    console.log(this);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {\r\n          <Growl\r\n            ref={(el) => {\r\n              this.growl = el;\r\n            }}\r\n          ></Growl>\r\n        }\r\n        {this.state.progressStatus && (\r\n          <ProgressBar\r\n            mode=\"indeterminate\"\r\n            style={{ height: \"6px\" }}\r\n          ></ProgressBar>\r\n        )}\r\n        <FileUpload\r\n          name=\"uploaded\"\r\n          mode=\"basic\"\r\n          url=\"/upload\"\r\n          onBeforeUpload={this.onBeforeUpload}\r\n          onUpload={this.onUpload}\r\n          onError={this.onError}\r\n          multiple={false}\r\n          // accept=\"image/*\"\r\n          // maxFileSize={1000000}\r\n          // customUpload={true}\r\n          // uploadHandler={this.myUploader}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoxUpload;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./components/header\";\nimport BoxUpload from \"./components/upload\";\nimport \"primeicons/primeicons.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"primereact/resources/primereact.css\";\nimport \"primereact/resources/themes/luna-pink/theme.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <BoxUpload />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import \"primereact/resources/primereact.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}